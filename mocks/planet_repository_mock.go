// Code generated by MockGen. DO NOT EDIT.
// Source: ./core/domains/planet/repositories/planet_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/martinsd3v/planets/core/domains/planet/entities"
)

// MockIPlanetRepository is a mock of IPlanetRepository interface.
type MockIPlanetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPlanetRepositoryMockRecorder
}

// MockIPlanetRepositoryMockRecorder is the mock recorder for MockIPlanetRepository.
type MockIPlanetRepositoryMockRecorder struct {
	mock *MockIPlanetRepository
}

// NewMockIPlanetRepository creates a new mock instance.
func NewMockIPlanetRepository(ctrl *gomock.Controller) *MockIPlanetRepository {
	mock := &MockIPlanetRepository{ctrl: ctrl}
	mock.recorder = &MockIPlanetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPlanetRepository) EXPECT() *MockIPlanetRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockIPlanetRepository) All(filters *map[string]interface{}) (entities.Planets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", filters)
	ret0, _ := ret[0].(entities.Planets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockIPlanetRepositoryMockRecorder) All(filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockIPlanetRepository)(nil).All), filters)
}

// Create mocks base method.
func (m *MockIPlanetRepository) Create(arg0 entities.Planet) (entities.Planet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(entities.Planet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIPlanetRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPlanetRepository)(nil).Create), arg0)
}

// Destroy mocks base method.
func (m *MockIPlanetRepository) Destroy(uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockIPlanetRepositoryMockRecorder) Destroy(uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockIPlanetRepository)(nil).Destroy), uuid)
}

// FindByUUID mocks base method.
func (m *MockIPlanetRepository) FindByUUID(arg0 string) (entities.Planet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUUID", arg0)
	ret0, _ := ret[0].(entities.Planet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUUID indicates an expected call of FindByUUID.
func (mr *MockIPlanetRepositoryMockRecorder) FindByUUID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUUID", reflect.TypeOf((*MockIPlanetRepository)(nil).FindByUUID), arg0)
}

// Save mocks base method.
func (m *MockIPlanetRepository) Save(arg0 entities.Planet) (entities.Planet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(entities.Planet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockIPlanetRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIPlanetRepository)(nil).Save), arg0)
}
