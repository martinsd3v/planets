// Code generated by MockGen. DO NOT EDIT.
// Source: ./core/tools/providers/hash/hash_provider.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIHashProvider is a mock of IHashProvider interface.
type MockIHashProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIHashProviderMockRecorder
}

// MockIHashProviderMockRecorder is the mock recorder for MockIHashProvider.
type MockIHashProviderMockRecorder struct {
	mock *MockIHashProvider
}

// NewMockIHashProvider creates a new mock instance.
func NewMockIHashProvider(ctrl *gomock.Controller) *MockIHashProvider {
	mock := &MockIHashProvider{ctrl: ctrl}
	mock.recorder = &MockIHashProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHashProvider) EXPECT() *MockIHashProviderMockRecorder {
	return m.recorder
}

// Compare mocks base method.
func (m *MockIHashProvider) Compare(hashed, payload string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compare", hashed, payload)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Compare indicates an expected call of Compare.
func (mr *MockIHashProviderMockRecorder) Compare(hashed, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compare", reflect.TypeOf((*MockIHashProvider)(nil).Compare), hashed, payload)
}

// Create mocks base method.
func (m *MockIHashProvider) Create(payload string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", payload)
	ret0, _ := ret[0].(string)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIHashProviderMockRecorder) Create(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIHashProvider)(nil).Create), payload)
}
