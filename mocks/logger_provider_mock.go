// Code generated by MockGen. DO NOT EDIT.
// Source: ./core/tools/providers/logger/logger_provider.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockILoggerProvider is a mock of ILoggerProvider interface.
type MockILoggerProvider struct {
	ctrl     *gomock.Controller
	recorder *MockILoggerProviderMockRecorder
}

// MockILoggerProviderMockRecorder is the mock recorder for MockILoggerProvider.
type MockILoggerProviderMockRecorder struct {
	mock *MockILoggerProvider
}

// NewMockILoggerProvider creates a new mock instance.
func NewMockILoggerProvider(ctrl *gomock.Controller) *MockILoggerProvider {
	mock := &MockILoggerProvider{ctrl: ctrl}
	mock.recorder = &MockILoggerProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILoggerProvider) EXPECT() *MockILoggerProviderMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockILoggerProvider) Error(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockILoggerProviderMockRecorder) Error(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockILoggerProvider)(nil).Error), v...)
}

// Info mocks base method.
func (m *MockILoggerProvider) Info(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockILoggerProviderMockRecorder) Info(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockILoggerProvider)(nil).Info), v...)
}
